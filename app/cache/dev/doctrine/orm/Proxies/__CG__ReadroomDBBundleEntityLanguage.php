<?php

namespace Proxies\__CG__\Readroom\DBBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Language extends \Readroom\DBBundle\Entity\Language implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setCode($code)
    {
        $this->__load();
        return parent::setCode($code);
    }

    public function getCode()
    {
        $this->__load();
        return parent::getCode();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setSortOrder($sort_order)
    {
        $this->__load();
        return parent::setSortOrder($sort_order);
    }

    public function getSortOrder()
    {
        $this->__load();
        return parent::getSortOrder();
    }

    public function addBook(\Readroom\DBBundle\Entity\Book $book)
    {
        $this->__load();
        return parent::addBook($book);
    }

    public function getBooks()
    {
        $this->__load();
        return parent::getBooks();
    }

    public function addCategoriesDescription(\Readroom\DBBundle\Entity\CategoriesDescription $categoriesDescription)
    {
        $this->__load();
        return parent::addCategoriesDescription($categoriesDescription);
    }

    public function getCategoriesDescriptions()
    {
        $this->__load();
        return parent::getCategoriesDescriptions();
    }

    public function addMetaTagsCategory(\Readroom\DBBundle\Entity\MetaTagsCategory $metaTagsCategory)
    {
        $this->__load();
        return parent::addMetaTagsCategory($metaTagsCategory);
    }

    public function getMetaTagsCategories()
    {
        $this->__load();
        return parent::getMetaTagsCategories();
    }

    public function addReader(\Readroom\DBBundle\Entity\Reader $reader)
    {
        $this->__load();
        return parent::addReader($reader);
    }

    public function getReaders()
    {
        $this->__load();
        return parent::getReaders();
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}