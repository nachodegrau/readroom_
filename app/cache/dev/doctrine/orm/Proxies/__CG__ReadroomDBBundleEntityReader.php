<?php

namespace Proxies\__CG__\Readroom\DBBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Reader extends \Readroom\DBBundle\Entity\Reader implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setReaderName($reader_name)
    {
        $this->__load();
        return parent::setReaderName($reader_name);
    }

    public function getReaderName()
    {
        $this->__load();
        return parent::getReaderName();
    }

    public function setReaderSecondName($reader_second_name)
    {
        $this->__load();
        return parent::setReaderSecondName($reader_second_name);
    }

    public function getReaderSecondName()
    {
        $this->__load();
        return parent::getReaderSecondName();
    }

    public function setReaderEmail($reader_email)
    {
        $this->__load();
        return parent::setReaderEmail($reader_email);
    }

    public function getReaderEmail()
    {
        $this->__load();
        return parent::getReaderEmail();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setReaderImage($reader_imafe)
    {
        $this->__load();
        return parent::setReaderImage($reader_imafe);
    }

    public function getReaderImage()
    {
        $this->__load();
        return parent::getReaderImage();
    }

    public function setReaderCity($reader_city)
    {
        $this->__load();
        return parent::setReaderCity($reader_city);
    }

    public function getReaderCity()
    {
        $this->__load();
        return parent::getReaderCity();
    }

    public function setReaderCountry($reader_country)
    {
        $this->__load();
        return parent::setReaderCountry($reader_country);
    }

    public function getReaderCountry()
    {
        $this->__load();
        return parent::getReaderCountry();
    }

    public function setReaderTelephone($reader_telephone)
    {
        $this->__load();
        return parent::setReaderTelephone($reader_telephone);
    }

    public function getReaderTelephone()
    {
        $this->__load();
        return parent::getReaderTelephone();
    }

    public function setIsFacebook($is_facebook)
    {
        $this->__load();
        return parent::setIsFacebook($is_facebook);
    }

    public function getIsFacebook()
    {
        $this->__load();
        return parent::getIsFacebook();
    }

    public function addComplaint(\Readroom\DBBundle\Entity\Complaint $complaint)
    {
        $this->__load();
        return parent::addComplaint($complaint);
    }

    public function getComplaints()
    {
        $this->__load();
        return parent::getComplaints();
    }

    public function addInput(\Readroom\DBBundle\Entity\Input $input)
    {
        $this->__load();
        return parent::addInput($input);
    }

    public function getInputs()
    {
        $this->__load();
        return parent::getInputs();
    }

    public function addLoan(\Readroom\DBBundle\Entity\Loan $loan)
    {
        $this->__load();
        return parent::addLoan($loan);
    }

    public function getLoans()
    {
        $this->__load();
        return parent::getLoans();
    }

    public function addOrder(\Readroom\DBBundle\Entity\Order $order)
    {
        $this->__load();
        return parent::addOrder($order);
    }

    public function getOrders()
    {
        $this->__load();
        return parent::getOrders();
    }

    public function addPresent(\Readroom\DBBundle\Entity\Present $present)
    {
        $this->__load();
        return parent::addPresent($present);
    }

    public function getPresents()
    {
        $this->__load();
        return parent::getPresents();
    }

    public function addReply(\Readroom\DBBundle\Entity\Reply $reply)
    {
        $this->__load();
        return parent::addReply($reply);
    }

    public function getReplies()
    {
        $this->__load();
        return parent::getReplies();
    }

    public function addBook(\Readroom\DBBundle\Entity\Book $book)
    {
        $this->__load();
        return parent::addBook($book);
    }

    public function getBooks()
    {
        $this->__load();
        return parent::getBooks();
    }

    public function addLanguage(\Readroom\DBBundle\Entity\Language $language)
    {
        $this->__load();
        return parent::addLanguage($language);
    }

    public function getLanguages()
    {
        $this->__load();
        return parent::getLanguages();
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}